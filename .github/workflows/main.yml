name: Build and Publish

on:
  push:
    branches: [main]

jobs:
  build:
    strategy:
      matrix:
        os: [{ version: ubuntu-latest, suffix: Linux }, 
             { version: windows-latest, suffix: Windows }, 
             { version: macos-latest, suffix: OSX }]
    name: Build
    runs-on: ${{ matrix.os.version }}
    outputs:
      VERSION: ${{ steps.get_version.outputs.version }}
      HASH_LINUX: ${{ steps.get_hash_linux.outputs.hash }}
      HASH_OSX: ${{ steps.get_hash_osx.outputs.hash }}
      HASH_WINDOWS: ${{ steps.get_hash_windows.outputs.hash }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Setup HK
        uses: BadMagic100/setup-hk@v1
        with:
            apiPath: References/
            dependencyFilePath: ModDependencies.txt

      - name: Setup MSBuild Linux
        if: matrix.os.suffix == 'Linux'
        run: |
          sudo apt-get install -y nuget mono-devel

      - name: Setup MSBuild Windows
        if: matrix.os.suffix == 'Windows'
        uses: microsoft/setup-msbuild@v1

      - name: Setup MSBuild OSX
        if: matrix.os.suffix == 'OSX'
        run: |
          brew install --overwrite nuget
          brew install --overwrite mono

      - name: Restore packages
        run: nuget restore FakePeppino.csproj

      - name: Build project
        run: dotnet build --configuration Release

      - name: Get SHA256 of zipped mod Linux
        if: matrix.os.suffix == 'Linux'
        id: get_hash_linux
        run: echo "::set-output name=hash::$(sha256sum Output/FakePeppino.zip | cut -d ' ' -f 1)"
    
      - name: Get SHA256 of zipped mod OSX
        if: matrix.os.suffix == 'OSX'
        id: get_hash_osx
        run: echo "::set-output name=hash::$(shasum -a 256 Output/FakePeppino.zip | cut -d ' ' -f 1)"

      - name: Get SHA256 of zipped mod Windows
        if: matrix.os.suffix == 'Windows'
        id: get_hash_windows
        run: |
          certutil -hashfile Output/FakePeppino.zip SHA256 > out.txt
          echo "::set-output name=hash::$(Get-Content -Path out.txt -TotalCount 2)[-1]"

      - name: Get Assembly version
        id: get_version
        run: echo "::set-output name=version::$(cat < Version.txt)"

      - name: Cache artifact
        uses: actions/cache@v3
        with:
          path: Output/FakePeppino_${{ matrix.os.suffix }}.zip
          key: FakePeppino_${{ matrix.os.suffix }}
  create_release:
    needs: build
    runs-on: ubuntu-latest
    outputs:
     UPLOAD_URL: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Generate body
        id: generate_body
        run: |
          export body="##SHA256:"
          body="$body\nLinux: ${{ needs.build.outputs.HASH_LINUX }}"
          body="$body\nOSX: $${{ needs.build.outputs.HASH_OSX }}"
          body="$body\nWindows: $${{ needs.build.outputs.HASH_WINDOWS }}"
          echo "::set-output name=body::$body"

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
            tag_name: ${{ needs.build.outputs.VERSION }}
            release_name: Release v${{ needs.build.outputs.VERSION }}
            body: ${{ steps.generate_body.outputs.body }}
            draft: false
            prerelease: false
  upload_assets:
    needs: create_release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [Linux, OSX, Windows]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: FakePeppino_${{ matrix.os }}
          path: Output/FakePeppino_${{ matrix.os }}.zip

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.UPLOAD_URL }}
          asset_path: Output/FakePeppino.zip
          asset_name: FakePeppino_${{ matrix.os.suffix }}.zip
          asset_content_type: application/zip
      